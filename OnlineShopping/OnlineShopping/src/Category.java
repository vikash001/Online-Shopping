

import java.awt.*;
import java.sql.*;
import javax.swing.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author vikash
 */


public class Category extends javax.swing.JPanel {

    /**
     * Creates new form Category
     */
    ArrayList<String> cat = new ArrayList<String>();
    int i = 0;
    ArrayList array;
   DefaultTableModel model = new javax.swing.table.DefaultTableModel(
            new Object [][]{},
            new String [] {
                "Categories"
            }
            )
                      
            {
                boolean[] canEdit = new boolean [] {false};
                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                     return canEdit [columnIndex];
                }
            };
    
    public Category() {
        initComponents();
        
        connection();
        if(cat.size() > 0){
            for(int j = 0; j < cat.size(); j++){
               model.insertRow(j,new Object[]{ cat.get(j)});
            }
        }
    }
    
    void connection(){
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
        } catch (ClassNotFoundException ex) {
                System.out.println(ex);
        }
        try {
            Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", database.uname, database.password);
                String query = "select * from category";
                PreparedStatement st = con.prepareStatement(query);
                ResultSet rs = st.executeQuery(query);
                
                while(rs.next()){
                    String s = rs.getString(1);
                    cat.add(s);
                    i++;
                }
                con.close();
            
           
        } catch (SQLException ex) {
            System.out.println(ex);
        }
     
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jcategorytable = new javax.swing.JTable(model);
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        jcategorytable.setModel(model);
        jcategorytable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcategorytableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jcategorytable);

        jTextField1.setFont(new java.awt.Font("Vrinda", 0, 16));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("Search");
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/go.png"))); // NOI18N
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1))
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcategorytableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcategorytableMouseClicked
        int index = jcategorytable.getSelectedRow();
        if(cat.size() >= index && index >= 0){
            
            ShoppingFrame.sfPublic.callProductPanel(cat.get(index));
            CardLayout crd = (CardLayout) ShoppingFrame.sfPublic.right.getLayout();
            crd.show(ShoppingFrame.sfPublic.right, "product");
        }
    }//GEN-LAST:event_jcategorytableMouseClicked

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
        jTextField1.setText("");
    }//GEN-LAST:event_jTextField1MouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        search();
	CardLayout crd = (CardLayout) ShoppingFrame.sfPublic.right.getLayout();
        crd.show(ShoppingFrame.sfPublic.right, "product");
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        search();
	CardLayout crd = (CardLayout) ShoppingFrame.sfPublic.right.getLayout();
        crd.show(ShoppingFrame.sfPublic.right, "product");
    }//GEN-LAST:event_jButton1ActionPerformed
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable jcategorytable;
    // End of variables declaration//GEN-END:variables
    String firstItem(){
        if(cat.size() > 0){
            return cat.get(0);
        }
        return "";
    }
  
    void search() {
        String str = jTextField1.getText();

        if (str.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a search querry!");
            return;
        }
        
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Product.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Connection con = null;
        
        try {
               str = str.toUpperCase();
               
               con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", database.uname, database.password);
               String query = "select * from item where upper(item_name) like '%" + str + "%'";
	    
               PreparedStatement st = con.prepareStatement(query); // = con.prepareStatement("select count(*) from item where item_cat = ?");
               ResultSet rs = st.executeQuery();
               array = new ArrayList();
               
               while(rs.next()){
                    if (rs.getBytes(7) != null) {
                        array.add(new ItemInfo(rs.getString(1), rs.getString(2), rs.getInt(3), rs.getInt(4), rs.getString(5), rs.getString(6),(new ImageIcon(rs.getBytes(7)))));
                    }
                    else {
                        array.add(new ItemInfo(rs.getString(1), rs.getString(2), rs.getInt(3), rs.getInt(4), rs.getString(5), rs.getString(6),(new ImageIcon() ) ) );
                    }
                }
               con.close();
         } catch (SQLException ex) {
              System.out.println(ex);
         }
        
        if (array.size() > 0) {
            ShoppingFrame.sfPublic.callProductPanelForSearch(array);
        }
        else {
            JOptionPane.showMessageDialog(null, "Sorry, No results found!, Please search by Item Name");
        }
        jTextField1.setText("Search");
    }
   
}
